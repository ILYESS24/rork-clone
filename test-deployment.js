// Script de test pour v√©rifier le d√©ploiement

import fs from 'fs';
import path from 'path';

console.log('üöÄ TEST DE D√âPLOIEMENT RORK PLATFORM');
console.log('=====================================');

// V√©rifier les fichiers critiques
const criticalFiles = [
    'dist/index.html',
    'dist/assets/index-Bh2j27Gf.js',
    'dist/assets/index-ZfsZLzIl.css',
    'src/main.tsx',
    'src/router.ts',
    'src/routes/root.tsx',
    'vercel.json'
];

console.log('\nüìÅ V√âRIFICATION DES FICHIERS CRITIQUES:');
criticalFiles.forEach(file => {
    if (fs.existsSync(file)) {
        console.log(`‚úÖ ${file}`);
    } else {
        console.log(`‚ùå ${file} - MANQUANT`);
    }
});

// V√©rifier le contenu de index.html
if (fs.existsSync('dist/index.html')) {
    const indexContent = fs.readFileSync('dist/index.html', 'utf8');
    console.log('\nüìÑ CONTENU DE INDEX.HTML:');
    console.log(indexContent);
    
    // V√©rifier que le div root existe
    if (indexContent.includes('<div id="root"></div>')) {
        console.log('‚úÖ Div root trouv√© dans index.html');
    } else {
        console.log('‚ùå Div root manquant dans index.html');
    }
    
    // V√©rifier que les scripts sont r√©f√©renc√©s
    if (indexContent.includes('index-Bh2j27Gf.js')) {
        console.log('‚úÖ Script principal r√©f√©renc√©');
    } else {
        console.log('‚ùå Script principal non r√©f√©renc√©');
    }
}

// V√©rifier le contenu de main.tsx
if (fs.existsSync('src/main.tsx')) {
    const mainContent = fs.readFileSync('src/main.tsx', 'utf8');
    console.log('\nüìÑ CONTENU DE MAIN.TSX:');
    console.log(mainContent);
    
    if (mainContent.includes('document.getElementById(\'root\')')) {
        console.log('‚úÖ main.tsx r√©f√©rence correctement l\'√©l√©ment root');
    } else {
        console.log('‚ùå main.tsx ne r√©f√©rence pas l\'√©l√©ment root');
    }
}

// V√©rifier la taille du bundle
if (fs.existsSync('dist/assets/index-Bh2j27Gf.js')) {
    const stats = fs.statSync('dist/assets/index-Bh2j27Gf.js');
    const fileSizeInKB = (stats.size / 1024).toFixed(2);
    console.log(`\nüì¶ TAILLE DU BUNDLE: ${fileSizeInKB} KB`);
    
    if (stats.size < 1000000) { // Moins de 1MB
        console.log('‚úÖ Bundle de taille acceptable');
    } else {
        console.log('‚ö†Ô∏è Bundle assez volumineux');
    }
}

console.log('\nüéØ RECOMMANDATIONS:');
console.log('1. V√©rifier que le serveur de d√©veloppement fonctionne: npm run dev');
console.log('2. Tester l\'application sur: http://localhost:5173');
console.log('3. V√©rifier la console du navigateur pour les erreurs');
console.log('4. Tester le build de production: npm run build');
console.log('5. Tester la pr√©visualisation: npm run preview');

console.log('\nüîß EN CAS DE PAGE BLANCHE:');
console.log('1. Ouvrir la console du navigateur (F12)');
console.log('2. V√©rifier les erreurs JavaScript');
console.log('3. V√©rifier que les fichiers CSS/JS se chargent');
console.log('4. V√©rifier que React se monte correctement');

console.log('\n‚úÖ TEST TERMIN√â');
